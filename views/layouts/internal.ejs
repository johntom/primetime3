<!DOCTYPE html>
<html ng-app="sailng" ng-controller="AppCtrl">
  <head>
    <!--<title>Sailng Internal Layout- Sails.js and Angular starter app / boilerplate</title>-->
      <title>CMS by GTZ</title>
      <base href="/">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!-- font awesome from BootstrapCDN -->
   <!--<link id="bootswatch" href="http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">-->

      <!--<link href="../assets//bower_components/bootstrap/dist/css/bootstrap.css"  rel="stylesheet">-->

      <!--<link rel="stylesheet" href="/styles/bootstrap.css">-->
      <!--STYLES-->
      <link rel="stylesheet" href="/min/production.css">
      <!--STYLES END-->

      <style>
          body {
              /*padding-top: 90px;*/
              padding-top: 0px;
          }

      </style>
  </head>
  <!--<script language="javascript">-->
      <!--function fnUnloadHandler() {-->
          <!--// Add your code here-->
          <!--alert("Unload event.. Do something to invalidate users session..");-->
      <!--}-->
  <!--</script><body onbeforeunload="fnUnloadHandler()">-->
  <body>
    <%- body %>

    <!--<footer>-->
        <!--<div class="container" style="padding-top:20px ">-->
            <!--<div class="col-sm-6 col-md-6 copyright">-->
                <!--&copy; Copyright 2014 - GTZ-->
            <!--</div>-->

            <!--<div class="col-sm-6 col-md-6">-->
                <!--<div class="menu-footer-column-1-container">-->
                    <!--<ul id="menu-footer-column-1" class="footerMenu">-->
                        <!--<li ng-hide="currentUser"><a href="/login"><span class="fa fa-sign-in fa-lg"></span> Sign in</a>-->
                        <!--</li>-->
                        <!--<li id="menu-item-16"-->
                            <!--class="menu-item menu-item-type-post_type menu-item-object-page menu-item-16">-->
                            <!--<a href="/about">About Us</a>-->
                        <!--</li>-->
                        <!--<li id="menu-item-14"-->
                            <!--class="menu-item menu-item-type-post_type menu-item-object-page menu-item-14">-->
                            <!--<a href="/policy">Privacy Policy</a>-->
                        <!--</li>-->
                        <!--<li id="menu-item-15"-->
                            <!--class="menu-item menu-item-type-post_type menu-item-object-page menu-item-15">-->
                            <!--<a href="/terms-of-service">Terms of Service</a>-->
                        <!--</li>-->
                        <!--<li id="menu-item-13"-->
                            <!--class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13">-->
                            <!--<a href="/contact-us">Contact Us</a>-->
                        <!--</li>-->

                    <!--</ul>-->
                <!--</div>-->
            <!--</div>-->
            <!--<div class="clearfix"></div>-->
        <!--</div>-->
    <!--</footer>-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, filesin your `assets/linker/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/min/production.js"></script>
    <!--SCRIPTS END-->


    <script type="text/javascript">
        /*$.get("http://api.bootswatch.com/3/", function (data) {
            var themes = data.themes;

            var select = $("#themeChanger");

            //select.show();

            themes.forEach(function(value, index){
                select.append($("<option/>")
                        .val(index)
                        .text(value.name));
            });



            select.change(function(){
                var theme = themes[$(this).val()];
                $('head').append('<link id="#bootswatchtheme" href='+ theme.css+' rel="stylesheet"  />');
                //$('#bootswatchtheme').attr("href", theme.css);

            }).change();

            //select.val(5);

        }, "json").fail(function(){
            $(".alert").toggleClass("alert-info alert-danger");
            $(".alert h4").text("Failure!");
        });*/
    </script>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/templates.js"></script>
    <!--TEMPLATES END-->


  </body>
</html>